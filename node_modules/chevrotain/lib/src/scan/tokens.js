"use strict";
function fillUpLineToOffset(lineToOffset, text) {
    var currLine = 0;
    var currOffset = 0;
    // line 1 (idx 0 in the array) always starts at offset 0
    lineToOffset.push(0);
    while (currOffset < text.length) {
        var c = text.charCodeAt(currOffset);
        if (c === 10) {
            currLine++;
            // +1 because the next line starts only AFTER the "\n"
            lineToOffset.push(currOffset + 1);
        }
        else if (c === 13) {
            if (currOffset !== text.length - 1 &&
                text.charCodeAt(currOffset + 1) === 10) {
                // +2 because the next line starts only AFTER the "\r\n"
                lineToOffset.push(currOffset + 2);
                // "consume" two chars
                currOffset++;
            }
            else {
                currLine++;
                // +1 because the next line starts only AFTER the "\r"
                lineToOffset.push(currOffset + 1);
            }
        }
        currOffset++;
    }
    // to make the data structure consistent
    lineToOffset.push(Infinity);
}
exports.fillUpLineToOffset = fillUpLineToOffset;
function getStartLineFromLineToOffset(startOffset, lineToOffset) {
    return findLineOfOffset(startOffset, lineToOffset);
}
exports.getStartLineFromLineToOffset = getStartLineFromLineToOffset;
function getEndLineFromLineToOffset(endOffset, lineToOffset) {
    return findLineOfOffset(endOffset, lineToOffset);
}
exports.getEndLineFromLineToOffset = getEndLineFromLineToOffset;
function getStartColumnFromLineToOffset(startOffset, lineToOffset) {
    return findColumnOfOffset(startOffset, lineToOffset);
}
exports.getStartColumnFromLineToOffset = getStartColumnFromLineToOffset;
function getEndColumnFromLineToOffset(endOffset, lineToOffset) {
    // none inclusive
    return findColumnOfOffset(endOffset, lineToOffset);
}
exports.getEndColumnFromLineToOffset = getEndColumnFromLineToOffset;
/**
 *  Modification of a binary search to seek
 */
function findLineOfOffset(targetOffset, lineToOffset) {
    var lowIdx = 0;
    var highIdx = lineToOffset.length - 1;
    var found = false;
    var line = -1;
    while (!found) {
        var middleIdx = Math.floor((highIdx + lowIdx) / 2);
        var middleOffset = lineToOffset[middleIdx];
        var middleNextOffset = lineToOffset[middleIdx + 1];
        if (middleOffset <= targetOffset &&
            middleNextOffset > targetOffset) {
            found = true;
            line = middleIdx;
        }
        else if (middleOffset > targetOffset) {
            highIdx = middleIdx;
        }
        else if (middleNextOffset < targetOffset) {
            lowIdx = middleIdx;
        }/* istanbul ignore else */ 
        else if (middleNextOffset === targetOffset) {
            found = true;
            line = middleIdx + 1;
        }
        else {
            /* istanbul ignore next */ throw Error("non exhaustive match");
        }
    }
    // +1 because lines are counted from 1 while array indices are zero based.
    return line + 1;
}
function findColumnOfOffset(offset, lineToOffset) {
    var line = findLineOfOffset(offset, lineToOffset);
    // +1 because columns always start at 1
    return offset - lineToOffset[line - 1] + 1;
}
