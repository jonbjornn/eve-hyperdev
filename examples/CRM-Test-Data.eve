# App Analytics

The `@view` database contains a number of handy canned visualizations that we can use. If they aren't inserted explicitly into the document, they'll attach themselves under the action that created them. We'll use a few of these views to keep track of our new application's pulse.


### Total number of users

```
search
  users = count[given: [#user]]

bind @view
  [#value | value: users]
```

### Average messages per conversations

```
search
  threads = [#thread messages]
  msgs-per-thread = count[given: messages] / count[given: threads]

bind @view
  [#value | value: msgs-per-thread]
```

### Conversations per hour

```
search
  threads = [#thread time: [hour]]
  c = count[given: threads per: hour]

bind @view
  [#value | value: "{{hour}} -> {{c}}"]

bind @view
  [#bar-graph | bar: [label: hour, height: c, sort: hour]]
```

### Messages per second

Count all the messages that occurred in the last second and add them to a historical graph.

```
search
  [#time timestamp]
  message-count = if messages = [#message time > timestamp - 1000]
                     message-count = count[given: messages]
                  then message-count
                  else 0

bind @view
  [#value | value: message-count]
  [#history #messages-per-second values: [timestamp | value: message-count]]
```

# Mock data generation

### Starting data

First, create a bunch of random users and conversations.

```
search
  r = range[from: 1 to: 100]
  hour = round[value: gaussian[seed: r, σ: 3, μ: 12]]
  hour' = if hour > 23 then 23
          else if hour < 0 then 0
          else hour

commit
  [#thread #test-data r time: [hour]]
  [#user #test-data r]
```

Next, prepopulate the threads with a set of initial messages.

```
search
  threads = [#thread not(messages)]
  [#time timestamp]
  r = gaussian[seed: threads, σ: 1, μ: 6]
  i = range[from: 1, to: r]

commit
  threads.messages += [#message i]
```

### Live data

Every few seconds, add a random number of messages to a thread. All the math here is just fudge to make the pattern of messages more interesting.

```
search
  [#time minutes seconds timestamp frames]
  mod[value: seconds, by: floor[value: random[seed: minutes * seconds] * 5 + 5]] = 0
  thread = [#thread r: floor[value: random[seed: frames] * 100]]
  frames' = frames / 7
  r = gaussian[seed: timestamp, σ: frames', μ: frames']
  r' = if r < 0 then 0 else r
  i = range[from: 0, to: r']

commit
  thread.messages += [#message i: "{{timestamp}}:{{i}}" time: timestamp]
```

Every few seconds, add a random number of users

```
search
  t = [#time seconds]
  min = 1
  max = 10
  r = random[seed: t.timestamp] * (max - min) + min
  i = range[from: 1 to: r]
  mod[value: seconds, by: floor[value: random[seed: seconds] * 8 + 5]] = 0

commit
  [#user #test-data i: "{{t.timestamp}}:{{i}}"]
```
