# Views

## Simple

### Value

A `#value` view just embeds the `value`(s) its passed. If those values happen to be entities, we'll tag them as such for composite views to mess with.

```
search @view
  wrapper = [#value value]
  ix = sort[value]
  lookup[record: wrapper, attribute: "tag", value: "value", node]

  is-entity = if substring[text: value to: 1] = "â¦‘" then true
              else false

bind @browser
  wrapper <- [#view #div node class: "view" children:
    [#div #value sort: ix text: value is-entity]]
```

## Tables

### Table

A `#table` is a simple N-column N-row grid.

Create the wrapper for the table.
@NOTE: This needs to sort.

```
search @view
  wrapper = [#table field row]
  lookup[record: wrapper, attribute: "tag", value: "table", node]
  lookup[record: row attribute: field value]

bind @browser @view
  wrapper <- [#view #table node class: "view" children:
    [#thead wrapper sort: 0 children:
      [#tr children:
        [#td text: field]]]
    [#tr row children:
      [#td field text: value]]]
```

### KV Table

A `#kv-table` is a two-column table which may have many values per key. All values for the same key will be grouped.

Create the DOM structure for `#kv-table`s.

```
search @view
  wrapper = [#kv-table kvs: [key]]
  ix = sort[value: key]

bind @browser
  wrapper <- [#kv-table #view #div class: "view kv-table" children:
    [#div #kv-row key class: "kv-row" sort: ix wrapper children:
      [#div class: "kv-key" text: key]
      [#div #kv-values class: "kv-values" wrapper key]]]
```

Inject the values for each key in the `#kv-table`.

```
search @view
  wrapper = [#kv-table kvs: [key value]]
  ix = sort[value per: key]

search @browser
  value-column = [#kv-values wrapper key]

bind @view @browser
  value-column.children += [#value value-column value sort: ix]
```

### Attribute Table

**DEPRECATED** This is a hack, since we do not support dynamic scoping, you cannot control what scope it finds EAVs in. Do not use this.

```
search @view
  wrapper = [#attribute-table entity]
  lookup[record: wrapper, attribute: "tag", value: "attribute-table", node]

search (@session, @browser)
  lookup[record: entity attribute: key value]

bind @view @browser
  wrapper.node := node
  wrapper.tag += "kv-table"
  wrapper.kvs := [key value]
```


## Charts & Graphs

### Bar Graph

Since we don't have min/max yet, we calculate it separately with sort.

```
search @view
  wrapper = [#bar-graph bar: [height]]
  sort[value: height, direction: "down", per: wrapper] = 1

bind @view
  wrapper.max-height := height
```

```
search @view
  wrapper = [#bar-graph bar max-height]
  node = if wrapper.node then wrapper.node
         else if lookup[record: wrapper, attribute: "tag", value: "bar-graph", node] then node

  graph-height = if wrapper.height then wrapper.height
                 else 300

  graph-width = if wrapper.width then wrapper.width
                 else 500

  bar = [label height]

  text = if bar = [#unlabeled] then ""
         else label

  sort = if bar.sort then bar.sort
         else bar
  bar-count = count[given: bar, per: wrapper]

  bar-width = if bar.width then bar.width
              else graph-width / bar-count

  bar-height = if max-height = 0 then 0
               else (height / max-height) * (graph-height - 30) // padding!

bind @browser
  wrapper <- [#view #div node class: "view bar-graph" style: [width: graph-width, height: graph-height] children:
    [#div wrapper class: "bar-graph-bar" label | sort style: [width: bar-width height: bar-height] text]]
```

### history

Commit the values so they stick around

~~~
search @view @stored
  history = [#history values]
  not(values = [#stored])
  values = [value]
  ix = if history.ix then history.ix + 1
       else 1

commit @stored
  history.values += values
  values.ix := ix
  values += #stored
  history.ix := ix
~~~

~~~
search @view
  history = [#history values]
  values = [value]

commit @stored
  values.value := value
~~~

Remove values as the history size grows

~~~
search @view @stored
  history = [#history values]
  size = if history.history-size then history.history-size
         else 30
  not(not(values.ix))
  total = count[given: values]
  total > size
  lowest = min[value: values.ix, given: values]
  [#history values: values2]
  values2 = [ix: lowest]

commit @stored
  values2 := none
~~~

History views are just special bar-graphs

~~~
search @view @stored
  history = [#history values]
  lookup[record: history, attribute: "tag", value: "history", node]
search @stored
  values.value
bind @view
  [#bar-graph history node | bar: [#unlabeled label: values.ix, sort: values.ix, height: values.value width: 15]]
~~~
